package main

import (
	"encoding/hex"
	"fmt"
)

type state [4][4]byte

var SBOX [16][16]byte = [16][16]byte{
	{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
	{0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
	{0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
	{0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
	{0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
	{0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
	{0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
	{0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
	{0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
	{0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
	{0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
	{0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
	{0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
	{0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
	{0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
	{0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16},
}

var INVERSE_SBOX [16][16]byte = [16][16]byte{
	{0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
	{0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
	{0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
	{0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
	{0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
	{0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
	{0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06},
	{0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b},
	{0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
	{0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
	{0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
	{0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
	{0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
	{0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
	{0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
	{0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d},
}

var MIX_COLUMNS [4][4]byte = [4][4]byte{
	{0x2, 0x3, 0x1, 0x1},
	{0x1, 0x2, 0x3, 0x1},
	{0x1, 0x1, 0x2, 0x3},
	{0x3, 0x1, 0x1, 0x2},
}

var INVERSE_MIX_COLUMNS [4][4]byte = [4][4]byte{
	{0xE, 0xB, 0xD, 0x9},
	{0x9, 0xE, 0xB, 0xD},
	{0xD, 0x9, 0xE, 0xB},
	{0xB, 0xD, 0x9, 0xE},
}

var RCON [10]byte = [10]byte{
	0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
}

func subBytes(p *state) state {
	var result state
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			b := p[i][j]
			x := (b >> 4) & 0xf
			y := b & 0xf

			result[i][j] = SBOX[x][y]
		}
	}
	return result
}

func inverseSubBytes(p *state) state {
	var result state
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			b := p[i][j]
			x := (b >> 4) & 0xf
			y := b & 0xf

			result[i][j] = INVERSE_SBOX[x][y]
		}
	}
	return result
}

func shiftRows(p *state) state {
	var result state
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			result[i][j] = p[i][(i+j)%4]
		}
	}
	return result
}

func inverseShiftRows(p *state) state {
	var result state
	for i := 0; i < 4; i++ {
		for j := 3; j >= 0; j-- {
			idx := j - i
			if idx < 0 {
				idx += 4
			}
			result[i][j] = p[i][idx]
		}
	}
	return result
}

func xTimes(x byte) byte {
	return (x << 1) ^ (((x >> 7) & 1) * 0x1b)
}

func mulGF256(x, y byte) byte { // Multiplication in GF(2^8)
	result := byte(0)
	for i := uint(0); i < 8; i++ {
		if (y>>i)&1 == 1 {
			if i == 0 {
				result ^= x
			} else {
				v := xTimes(x)
				for j := 0; j < int(i-1); j++ {
					v = xTimes(v)
				}
				result ^= v
			}
		}
	}
	return result
}

func mixColumns(p *state) state {
	var result state
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			for k := 0; k < 4; k++ {
				result[i][j] ^= mulGF256(p[k][j], MIX_COLUMNS[i][k])
			}
		}
	}
	return result
}

func inverseMixColumns(p *state) state {
	var result state
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			for k := 0; k < 4; k++ {
				result[i][j] ^= mulGF256(p[k][j], INVERSE_MIX_COLUMNS[i][k])
			}
		}
	}
	return result
}

func addRoundKey(p, roundKey *state) state {
	var result state
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			result[i][j] = p[i][j] ^ roundKey[i][j]
		}
	}
	return result
}

func XOR_WORD(a, b *[4]byte) [4]byte {
	var result [4]byte
	for i := 0; i < 4; i++ {
		result[i] = a[i] ^ b[i]
	}
	return result
}

func ROT_WORD(a *[4]byte) [4]byte {
	var result [4]byte
	for i := 0; i < 4; i++ {
		result[i] = a[(i+1)%4]
	}
	return result
}

func SUB_WORD(a *[4]byte) [4]byte {
	var result [4]byte
	for i := 0; i < 4; i++ {
		x := (a[i] >> 4) & 0xf
		y := a[i] & 0xf

		result[i] = SBOX[x][y]
	}
	return result
}

func expandKey(k string) [][4]byte {
	n := len(k) / 8
	t := make([][4]byte, 40+n)
	for i := 0; i < len(k)/2; i++ {
		v, _ := hex.DecodeString(k[i*2 : i*2+2])
		t[i/4][i%4] = v[0]
	}

	for i := 0; i < 40; i++ {
		word_idx := n + i
		if i%4 == 0 {
			t[word_idx] = ROT_WORD(&t[word_idx-1])
			t[word_idx] = SUB_WORD(&t[word_idx])
			t[word_idx] = XOR_WORD(&t[word_idx], &t[word_idx-4])
			t[word_idx] = XOR_WORD(&t[word_idx], &[4]byte{RCON[i/4], 0x0, 0x0, 0x0})
		} else {
			t[word_idx] = XOR_WORD(&t[word_idx-1], &t[word_idx-4])
		}
	}

	result := make([][4]byte, len(t))
	for i := 0; i < len(t)/4; i++ { // Transpose of every 4 words
		for j := 0; j < 4; j++ {
			for k := 0; k < 4; k++ {
				result[j+4*i][k] = t[k+4*i][j]
			}
		}
	}
	return result
}

func stateToString(p *state) string {
	result := ""
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			result += hex.EncodeToString([]byte{p[j][i]})
		}
	}
	return result
}

func encrypt(text, keyStr string) string {
	key := expandKey(keyStr)

	var s, roundKey state
	for i := 0; i < 16; i++ {
		v, _ := hex.DecodeString(text[i*2 : i*2+2])
		s[i%4][i/4] = v[0]
	}

	copy(roundKey[:], key[0:4])
	s = addRoundKey(&s, &roundKey)

	for i := 1; i < len(key)/4-1; i++ {
		s = subBytes(&s)
		s = shiftRows(&s)
		s = mixColumns(&s)
		copy(roundKey[:], key[i*4:i*4+4])
		s = addRoundKey(&s, &roundKey)
	}

	s = subBytes(&s)
	s = shiftRows(&s)
	copy(roundKey[:], key[len(key)-4:len(key)])
	s = addRoundKey(&s, &roundKey)

	return stateToString(&s)
}

func decrypt(text, keyStr string) string {
	key := expandKey(keyStr)

	var s, roundKey state
	for i := 0; i < 16; i++ {
		v, _ := hex.DecodeString(text[i*2 : i*2+2])
		s[i%4][i/4] = v[0]
	}

	copy(roundKey[:], key[len(key)-4:len(key)])
	s = addRoundKey(&s, &roundKey)

	for i := len(key)/4 - 2; i >= 1; i-- {
		s = inverseSubBytes(&s)
		s = inverseShiftRows(&s)
		s = inverseMixColumns(&s)
		copy(roundKey[:], key[i*4:i*4+4])
		roundKey = inverseMixColumns(&roundKey)
		s = addRoundKey(&s, &roundKey)
	}

	s = inverseSubBytes(&s)
	s = inverseShiftRows(&s)
	copy(roundKey[:], key[0:4])
	s = addRoundKey(&s, &roundKey)

	return stateToString(&s)
}

func main() {
	var text, key, result string
	var mode int

	fmt.Print("Enter the key: ")
	fmt.Scanf("%s", &key)
	if len(key) != 32 {
		fmt.Println("Invalid key length")
		return
	}

	fmt.Print("Enter the plaintext: ")
	fmt.Scanf("%s", &text)
	if len(text) != 32 {
		fmt.Println("Invalid plaintext length")
		return
	}

	fmt.Println("You wish to do:")
	fmt.Println("1. Encryption")
	fmt.Println("2. Decryption")
	fmt.Scanf("%d", &mode)
	if mode == 1 {
		result = encrypt(text, key)
	} else {
		result = decrypt(text, key)
	}
	fmt.Println(result)
}
